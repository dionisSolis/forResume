using System;
using System.Diagnostics;
namespace qwerty
{
    class Program
    {
        static void Main(string[] args)
        {
            const int MenuCreateDirection = 1;
            const int MenuCreateTrain = 2;
            const int MenuShowDirections = 3;
            const int MenuMoveToNextDay = 4;

            bool isPlay = true;

            RailwayStation railwayStation = new RailwayStation();
            Menu menu = new Menu(1, 4);

            while (isPlay == true)
            {
                Console.WriteLine("К О Н Ф И Г У Р А Т О Р  П О Е З Д О В\n" +
                    $"  {MenuCreateDirection})Создать направление\n" +
                    $"  {MenuCreateTrain})Сформировать поезд\n" +
                    $"  {MenuShowDirections})Показать направления\n" +
                    $"  {MenuMoveToNextDay})Перейти к следующему дню\n" +
                    "Используйте стрелки для выбора, Enter для подтверждения, Backspace для выхода\n");

                railwayStation.ShowInfo();

                menu.ShowPointer();
                ConsoleKey inputKey = menu.GetInputKey();

                if (inputKey == ConsoleKey.Enter)
                {
                    Console.Clear();

                    switch (menu.Cursor)
                    {
                        case MenuCreateDirection:
                            railwayStation.CreateDirection();
                            break;

                        case MenuCreateTrain:
                            railwayStation.CreateTrain();
                            break;

                        case MenuShowDirections:
                            railwayStation.ShowDirections();
                            break;

                        case MenuMoveToNextDay:
                            railwayStation.MoveToNextDay();
                            break;
                    }

                    Console.Write("\n\nНажмите любую кнопку для обновления...");
                    Console.ReadKey();
                }
                else if (inputKey == ConsoleKey.Backspace)
                {
                    isPlay = false;
                }

                Console.Clear();
            }
        }
    }

    class Menu
    {
        private int _firstCursorPosition;
        private int _lastCursorPostion;
        private string _pointer;

        public Menu(int firstCursorPosition, int lastCursorPostion)
        {
            Cursor = firstCursorPosition;
            _firstCursorPosition = firstCursorPosition;
            _pointer = "=>";
            _lastCursorPostion = lastCursorPostion;
        }

        public int Cursor { get; private set; }

        public void ShowPointer()
        {
            Console.CursorVisible = false;
            Console.SetCursorPosition(0, Cursor);
            Console.Write(_pointer);
        }

        public ConsoleKey GetInputKey()
        {
            ConsoleKey inputKey = Console.ReadKey(true).Key;

            ManipulateCursor(inputKey);

            return inputKey;
        }

        private void ManipulateCursor(ConsoleKey inputKey)
        {
            switch (inputKey)
            {
                case ConsoleKey.UpArrow:
                    Cursor--;
                    break;

                case ConsoleKey.DownArrow:
                    Cursor++;
                    break;
            }

            ClampCursorPosition();
        }

        private void ClampCursorPosition()
        {
            if (Cursor < _firstCursorPosition)
            {
                Cursor = _firstCursorPosition;
            }
            else if (Cursor > _lastCursorPostion)
            {
                Cursor = _lastCursorPostion;
            }
        }
    }

    class RailwayStation
    {
        private List<string> _directions;
        private List<Train> _trains;

        public RailwayStation()
        {
            _directions = new List<string>();
            _trains = new List<Train>();
        }

        public void ShowInfo()
        {
            Console.WriteLine("Текущие рейсы\n");

            foreach (Train train in _trains)
            {
                train.ShowInfo();
            }
        }

        public void CreateDirection()
        {
            Console.CursorVisible = true;

            Console.Write("Введите пункт отправления: ");
            string departurePoint = Console.ReadLine().ToUpper();

            Console.Write("Введите пункт прибытия: ");
            string arivalPoint = Console.ReadLine().ToUpper();

            if (IsCorrectDirection(departurePoint, arivalPoint) == true)
            {
                _directions.Add(new string(departurePoint + " - " + arivalPoint));
            }
        }

        public void CreateTrain()
        {
            string direction = SelectDirections();

            if (direction == null)
            {
                return;
            }

            Console.CursorVisible = true;

            Train train = new Train(direction);

            int tickets = SellTickets();

            while (train.TotalCapacity < tickets)
            {
                Console.WriteLine("Текущая вместимость поезда: " + train.TotalCapacity + " чел.");
                Console.WriteLine("Продано билетов:" + tickets + "\n");
                train.AddWagon();
                Console.Clear();
            }

            _trains.Add(train);
            Console.WriteLine("Поезд отправлен!");
        }

        public void ShowDirections()
        {
            Console.WriteLine("Направления ");

            foreach (string direction in _directions)
            {
                Console.WriteLine("  " + direction);
            }
        }

        public void MoveToNextDay()
        {
            for (int i = 0; i < _trains.Count; i++)
            {
                _trains[i].Travel();

                if (_trains[i].TravelTime == 0)
                {
                    _trains.Remove(_trains[i]);
                }
            }
        }

        private bool IsCorrectDirection(string departurePoint, string arivalPoint)
        {
            if (departurePoint == arivalPoint)
            {
                Console.WriteLine("ОШИБКА! Пункт отправления и пункт прибытия совпадают");
                return false;
            }
            else if (_directions.Contains(new string(departurePoint + " - " + arivalPoint)) == true)
            {
                Console.WriteLine("Направление уже существует");
                return false;
            }

            return true;
        }

        private string SelectDirections()
        {
            if (_directions.Count == 0)
            {
                Console.WriteLine("Сначала создайте направление");
                return null;
            }

            bool isSelect = false;
            Menu menuDirection = new Menu(1, _directions.Count);

            string direction = "";

            while (isSelect == false)
            {
                ShowDirections();
                menuDirection.ShowPointer();
                ConsoleKey inputKey = menuDirection.GetInputKey();

                if (inputKey == ConsoleKey.Enter)
                {
                    isSelect = true;
                    direction = _directions[menuDirection.Cursor - 1];
                }
                else if (inputKey == ConsoleKey.Backspace)
                {
                    return null;
                }

                Console.Clear();
            }

            return direction;
        }

        private int SellTickets()
        {
            Random random = new Random();

            return random.Next(10, 40);
        }
    }

    class Train
    {
        private List<Wagon> _wagons;
        private string _direction;

        public Train(string direction)
        {
            _wagons = new List<Wagon>();
            _direction = direction;

            Random random = new Random();
            TravelTime = random.Next(1, 7);

            TotalCapacity = 0;
        }

        public int TotalCapacity { get; private set; }
        public int TravelTime { get; private set; }

        public void AddWagon()
        {
            int capacity = ReadCapacity();

            _wagons.Add(new Wagon(capacity));

            TotalCapacity += capacity;
        }

        public void ShowInfo()
        {
            Console.WriteLine($"Поезд {_direction}\nПриедет через {TravelTime} дн.\nОбщая вместимость: {TotalCapacity}\nВагоны:");

            for (int i = 1; i <= _wagons.Count; i++)
            {
                Console.WriteLine(i + ")" + _wagons[i - 1].Capacity + " чел.");
            }

            Console.WriteLine("\n");
        }

        public void Travel()
        {
            TravelTime--;
        }

        private int ReadCapacity()
        {
            int capacity;

            Console.Write("Введите вместимость вагона: ");

            while (int.TryParse(Console.ReadLine(), out capacity) == false || capacity <= 0)
            {
                Console.Write("Введите корректную вместимость вагона: ");
            }

            return capacity;
        }
    }

    class Wagon
    {
        public Wagon(int capacity)
        {
            Capacity = capacity;
        }

        public int Capacity { get; }
    }
}
